function logOdds = updateLaserBeamGrid(angles, ranges, Tl, logOdds, R, C, Xmax, Ymax, rangeMax, p_occ, p_free, L_max)
%UPDATELASERBEAMGRID  Integrate one LiDAR scan into a 2‑D occupancy grid (log‑odds form)
%
%   logOdds = updateLaserBeamGrid(angles, ranges, Tl, logOdds, R, C, ...
%                                 Xmax, Ymax, rangeMax, p_occ, p_free, L_max)
%
%   The grid spans 0‥Xmax (x)  and  0‥Ymax (y)  and is stored as an
%   R×C matrix of log‑odds values (row = Y, col = X, origin bottom‑left).
%
%   Required inputs
%   ---------------
%   angles    Nx1   [rad]  LiDAR beam directions in the LiDAR frame
%   ranges    Nx1   [m]    Beam ranges (Inf ⇒ no hit)
%   Tl        3×3          Homogeneous transform LiDAR→World (SE(2))
%   logOdds   R×C   double Current log‑odds grid (will be modified)
%   R, C               int Grid size (rows, cols)
%   Xmax, Ymax         m   Physical dimensions of the grid
%   rangeMax           m   Sensor maximum range (for Inf beams)
%
%   Optional parameters
%   -------------------
%   p_occ    (default 0.7)  Probability assigned to an occupied cell
%   p_free   (default 0.3)  Probability assigned to a traversed free cell
%   L_max    (default 6)    Saturation limit for |logOdds| to avoid
%                           numerical overflow (≈ p=0.997)
%
%   The function performs a classic Bayes log‑odds update:
%       l_new = clip( l_old + log( p / (1-p) ) , ±L_max )
%   where p = p_free for every cell the ray passes through, and
%   p = p_occ for the end‑cell when the beam returns a finite hit.
%
%   ------------------------------------------------------------------
%   EBS‑221 Final Project helper
%   ------------------------------------------------------------------

% ---------------- Parameter defaults ---------------------------------
if nargin < 10 || isempty(rangeMax), error('rangeMax must be supplied'); end
if nargin < 11 || isempty(p_occ),    p_occ  = 0.7; end
if nargin < 12 || isempty(p_free),   p_free = 0.3; end
if nargin < 13 || isempty(L_max),    L_max  = 6;  end   % corresponds to p ≈ 0.997

l_occ  =  log(p_occ /(1-p_occ));   % +ve increment
l_free =  log(p_free/(1-p_free));  % −ve increment

% ---------------- Pre‑compute constants -------------------------------
cellW = Xmax / C;   % cell width  [m]
cellH = Ymax / R;   % cell height [m]

% LiDAR origin in world coords & grid indices
oriW = Tl*[0;0;1];
[oi, oj] = worldToGrid(oriW(1), oriW(2), cellW, cellH, R, C);

% ---------------- Iterate over beams ----------------------------------
N = numel(angles);
parfor k = 1:N
    ang = angles(k);
    r   = ranges(k);

    % Compute hit (or max‑range) in LiDAR frame then world frame
    if ~isfinite(r)
        r = rangeMax;
        isHit = false;
    else
        isHit = true;
    end
    ptW = Tl * [r*cos(ang); r*sin(ang); 1];
    [ti, tj] = worldToGrid(ptW(1), ptW(2), cellW, cellH, R, C);

    % Generate integer coordinates of the cells the ray crosses
    [rayI, rayJ] = bresenhamLine(oi, oj, ti, tj);
    if isempty(rayI), continue; end

    % Free cells: all except the last index (even if it is a max‑range miss)
    freeIdx = 1:max(1, numel(rayI) - 1);
    linFree = sub2ind([R C], rayI(freeIdx), rayJ(freeIdx));
    logOdds(linFree) = saturateLogOdds(logOdds(linFree) + l_free, L_max);

    % Occupied cell: only if finite hit
    if isHit
        linOcc = sub2ind([R C], rayI(end), rayJ(end));
        logOdds(linOcc) = saturateLogOdds(logOdds(linOcc) + l_occ, L_max);
    end
end
end

%% =====================================================================
function [i,j] = worldToGrid(x,y,cellW,cellH,R,C)
    j = floor(x / cellW) + 1;
    i = R - floor(y / cellH);
    i = min(max(i,1), R);
    j = min(max(j,1), C);
end

%% =====================================================================
function [I,J] = bresenhamLine(i0,j0,i1,j1)
    di = abs(i1-i0);  dj = abs(j1-j0);
    si = sign(i1-i0); sj = sign(j1-j0);
    if di==0 && dj==0, I=i0; J=j0; return; end
    I = []; J = [];
    if di > dj
        err = di/2;  j = j0;
        for i = i0:si:i1
            I(end+1)=i; J(end+1)=j; %#ok<AGROW>
            err = err - dj;
            if err < 0, j = j + sj; err = err + di; end
        end
    else
        err = dj/2;  i = i0;
        for j = j0:sj:j1
            I(end+1)=i; J(end+1)=j; %#ok<AGROW>
            err = err - di;
            if err < 0, i = i + si; err = err + dj; end
        end
    end
end

%% =====================================================================
function l = saturateLogOdds(l, L_max)
    l = max(min(l,  L_max), -L_max);
end
